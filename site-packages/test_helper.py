import sys
#del sys.modules["sikuli.SikuliImporter"]
#sys.meta_path = []
import unittest
import xmlrunner
import glob
import platform
import shutil
import time
import os
import datetime
import inspect
import atexit
from yattag import Doc
from favoriteRegions import *


import sikuli.Sikuli as sikuli
from org.sikuli.basics import Debug as SikuliDebug
from org.sikuli.basics import Settings as SikuliSettings
from org.sikuli.script import Mouse as SikuliMouse
from sikuli.Sikuli import Region as SikuliRegion

#__all__ = ["","",""]

# This screen_logger overrides native sikuli commands with automatic logging.
def screen_logger(func):
    def wrapper(*args, **kwargs):
        #print "Arguments were: %s %s | %s" % (func.__name__, args, kwargs)
        frames = inspect.getouterframes(inspect.currentframe())
        scriptname = os.path.basename(frames[1][1])[:-3]
        if frames[1][3] == "<module>":
            #frame = frames[1][0]
            #filename = frames[1][1]
            lineno = frames[1][2]
            #function = frames[1][3]
            code_context = frames[1][4][0]
            #index = frames[1][5]
            output = "[Line "+str(lineno)+"] "+str(code_context)
            if isinstance(args[0],SikuliRegion):
                image = args[1]
                area = args[0]
            else:
                image = args[0]
                area = sikuli.SCREEN
            ### TODO replace image in code_context with image for HTML log, consolidate columns
            ### TODO add similarity score
            try:
                screenshot = sikuli.capture(area)
                result = func(*args, **kwargs)
                _write("+++",scriptname, output)
                _write_html_row(scriptname,func.__name__, image, "Success", screenshot)
                return result
            except sikuli.FindFailed:
                screenshot = sikuli.capture(area)
                _write("---",scriptname, output)
                _write_html_row(scriptname,func.__name__, image, "Fail", screenshot)
                raise
            except:
                raise
        else:
            return func(*args, **kwargs)
    return wrapper

click = screen_logger(sikuli.click)
doubleClick = screen_logger(sikuli.doubleClick)
rightClick = screen_logger(sikuli.rightClick)
dragDrop = screen_logger(sikuli.dragDrop)
drag = screen_logger(sikuli.drag)
dropAt = screen_logger(sikuli.dropAt)
wheel = screen_logger(sikuli.wheel)
type = screen_logger(sikuli.type)
paste = screen_logger(sikuli.paste)
hover = screen_logger(sikuli.hover)
mouseMove = screen_logger(sikuli.mouseMove)
find = screen_logger(sikuli.find)
findAll = screen_logger(sikuli.findAll)
wait = screen_logger(sikuli.wait)
waitVanish = screen_logger(sikuli.waitVanish)
exists = screen_logger(sikuli.exists)
onAppear = screen_logger(sikuli.onAppear)
onVanish = screen_logger(sikuli.onVanish)

class Region(SikuliRegion):
    click = screen_logger(SikuliRegion.click)
    doubleClick = screen_logger(SikuliRegion.doubleClick)
    rightClick = screen_logger(SikuliRegion.rightClick)
    dragDrop = screen_logger(SikuliRegion.dragDrop)
    drag = screen_logger(SikuliRegion.drag)
    dropAt = screen_logger(SikuliRegion.dropAt)
    wheel = screen_logger(SikuliRegion.wheel)
    type = screen_logger(SikuliRegion.type)
    paste = screen_logger(SikuliRegion.paste)
    hover = screen_logger(SikuliRegion.hover)
    mouseMove = screen_logger(SikuliRegion.mouseMove)
    find = screen_logger(SikuliRegion.find)
    findAll = screen_logger(SikuliRegion.findAll)
    wait = screen_logger(SikuliRegion.wait)
    waitVanish = screen_logger(SikuliRegion.waitVanish)
    exists = screen_logger(SikuliRegion.exists)
    onAppear = screen_logger(SikuliRegion.onAppear)
    onVanish = screen_logger(SikuliRegion.onVanish)

# These functions handle generating the HTML log file at the end of a script or when
# the testrunners are used.
def generateHTML():
    print "****Generating HTML file****"
    display_log()

my_handler_entries = [e for e in atexit._exithandlers if e[0] == generateHTML]
if len(my_handler_entries) == 0:
    #print "registering HTML generator with atexit"
    atexit.register(generateHTML)

def generateHTMLforRun(func):
    def wrapper(*args, **kwargs):
        #print "removing atexit handler"
        #remove atexit because runscript prematurely exits
        my_handler_entries = [e for e in atexit._exithandlers if e[0] == generateHTML]
        for e in my_handler_entries:
            atexit._exithandlers.remove(e)
        result = func(*args, **kwargs)
        generateHTML()
        return result
    return wrapper

unittest.TextTestRunner.run = generateHTMLforRun(unittest.TextTestRunner.run)
xmlrunner.XMLTestRunner.run = generateHTMLforRun(xmlrunner.XMLTestRunner.run)

'''
def generateHTMLforRunScript(func):
    def wrapper(*args, **kwargs):
        #print "removing atexit handler"
        #remove atexit because runscript prematurely exits
        my_handler_entries = [e for e in atexit._exithandlers if e[0] == generateHTML]
        for e in my_handler_entries:
            atexit._exithandlers.remove(e)
        result = func(*args, **kwargs)
        atexit.register(generateHTML)
        return result
    return wrapper

runScript = generateHTMLforRunScript(sikuli.runScript)
'''

# Get the folder right above the script's folder. (aka the sikuli folder, with all the tests.)
# Also get the path to the shared vagrant folder.
myOS = sikuli.Env.getOS()
myFolder = sikuli.getBundleFolder()
if myOS == sikuli.OS.LINUX:
    wd = os.path.dirname(myFolder)
    SikuliRepo = os.path.join(os.path.expanduser('~'),".Sikulix/")
    vagrant_folder = "/vagrant/"
    home_folder = os.path.expanduser('~')+"/"
    # addImagePath(/* linux image directory */)
elif myOS == sikuli.OS.WINDOWS:
    wd = os.path.dirname(myFolder)
    SikuliRepo = os.path.join(os.getenv('APPDATA'),"Sikulix\\")
    vagrant_folder = "C:/vagrant/"
    home_folder = os.getenv('USERPROFILE')+"\\"
    # addImagePath(/* windows image directory */)
elif myOS == OS.MAC:
    wd = os.path.dirname(myFolder)
    SikuliRepo = os.path.join(os.path.expanduser('~'),"Library/Application Support/Sikulix/")
    home_folder = os.path.expanduser('~')+"/"
else:
    print "Unsupported OS."
    exit(1)
SitePackages = os.path.join(SikuliRepo, "Lib/site-packages")
# Put the helpers directory in sys.path.
if (wd + "/helpers") not in sys.path:
    sys.path.append(wd + "/helpers")

# Determine Logging Folder
# A sikuliVagrant environment variable (EV) makes one log in the default vagrant folder.
# A permanent logFile EV makes one log in the location defined in the variable.
# Otherwise the logFile EV is set dynamically to the first script caller.
# This keeps helper scripts logs in the main folder.
if os.getenv("sikuliVagrant") == None:
    if os.getenv("logFile")== None:
        log_folder = sikuli.getBundleFolder()
        os.putenv("logFile", log_folder)
    else:
        log_folder = os.getenv("logFile")
else:
    log_folder = vagrant_folder
    os.putenv("logFile", vagrant_folder)

# If a file with the given filename already exists, the Logger will
# just keep writing to the end of that file.
# *filename* is the path to the text log.
# *log_folder* is the path to the directory which stores the
# html log and its assiocated images.
file = log_folder + "/error_log"
artifact_folder = log_folder + "/log"

# Create the log folder if it doesn't exist
if not os.path.exists(artifact_folder):
    os.makedirs(artifact_folder)
    partial_html = artifact_folder + "/mylog.log"
# Otherwise, see if there's already a log file
else:
    glob_result = glob.glob(artifact_folder + "/*.log")
    if len(glob_result) == 1:
        partial_html = glob_result[0]
    else:
        partial_html = artifact_folder + "/mylog.log"

# Add the CSS stylesheet to the log folder, if it's not there already.
if not os.path.exists(artifact_folder + "/log.css"):
    shutil.copyfile(SitePackages+"/log.css",
                    artifact_folder + "/log.css")

# Add the display_log script to /vagrant, if it's not there
# (so it's accessible from the host machine)
#if not os.path.exists(shared_folder + "/display_log.py"):
#    shutil.copyfile(SitePackages+"/display_log.py",
#                    shared_folder + "/display_log.py")

doc, tag, text = Doc().tagtext()
with tag("tr"):
    with tag("td", style="text-align: center; background-color:lightskyblue", colspan="6"):
        text(time.strftime("%x %H:%M:%S")+": "+myFolder)
with open(partial_html, "a") as f:
    f.write(doc.getvalue())

###################
# Logging methods
###################

# Prepends the time and test name and appends a newline before writing to file.
def _write(result_type, test, line):
    with open(file, "a") as f:
        f.write(time.strftime("%H:%M:%S %x")+" "+result_type+" "+test+": "+line+"\n")
    print(time.strftime("%H:%M:%S %x")+" "+result_type+" "+test+": "+line+"\n")

# Copy a file into the log folder and return just the name of the file.
def _copy_testfile(file_to_copy):
    name = os.path.basename(file_to_copy)
    new_path = artifact_folder + "/" + name
    shutil.copyfile(file_to_copy, new_path)
    return name

# Find an image file in sys.path. If not found, or
# not a valid image, return an empty string.
def _find_valid_image(img):
    valid_extensions = ["png", "jpg", "jpeg"]
    split_result = img.split('.')

    # If no '.': not a file
    if len(split_result) <= 1:
        return ""
    # If there is only one '.' and nothing before it, not a file
    elif len(split_result) == 2 and  split_result[0] == "":
        return ""
    # If it doesn't end in a valid extension, not an image file
    elif split_result[-1] not in valid_extensions:
        return ""
    # If it's an absolute path (that passed the file extension
    # tests), return it
    elif os.path.isfile(img):
        return img

    # Look in all the SIKULI_IMAGE_PATH dirs to see if it's there
    image_dirs = list(sikuli.getImagePath())
    image_dirs.insert(0, sikuli.getBundlePath())
    my_frames = inspect.getouterframes(inspect.currentframe())
    image_path = os.path.dirname(my_frames[3][1])
    image_dirs.insert(0, image_path)

    for dir in image_dirs:
        if dir[-1] != '/':
            dir = dir + '/'
        # If found, return the full path
        if os.path.isfile(dir + img):
            return dir + img

    return ""

# Write a log entry into the "mylog.log" file in the log
# folder, in the form of an html table row (<tr>).
def _write_html_row(script_name, action_type, expected, result_type, screenshot):
    doc, tag, text = Doc().tagtext()

    # Create the row
    # Test name, Action, Expected, Screenshot
    with tag("tr"):
        if result_type == "Success":
            with tag("td", ('bgcolor', 'green')):
                text("+++")
        elif result_type == "Fail":
            with tag("td", ('bgcolor', 'red')):
                text("---")
        else:
            with tag("td"):
                text("???")
        with tag("td"):
            text(time.strftime("%H:%M:%S %x"))
        with tag("td"):
            text(script_name)
        with tag("td"):
            text(action_type)
        with tag("td"):
            # If 'expected' is given, figure out what kind
            # of thing it is
            if expected:
                expected_path = ""
                # If it's a pattern, get the image
                if isinstance(expected, sikuli.Pattern):
                    full_path = _find_valid_image(expected.getFilename())
                    expected_path = _copy_testfile(full_path)
                # If it's a match or a region, take a
                # screenshot of the area
                elif (isinstance(expected, sikuli.Match) or
                      isinstance(expected, sikuli.Region)):
                    screencap = sikuli.capture(expected)
                    expected_path = _copy_testfile(screencap)
                elif isinstance(expected, sikuli.Location):
                    # Create an area 50px around the location
                    r = sikuli.Region(expected.getX(), expected.getY(), 0, 0)
                    r = r.nearby()
                    # take a screenshot
                    screencap = sikuli.capture(r)
                    expected_path = _copy_testfile(screencap)
                elif isinstance(expected, str):
                    full_path = _find_valid_image(expected)

                    # If a path was found, add a clickable image.
                    # If not, add text.
                    if full_path:
                        expected_path = _copy_testfile(full_path)

                if expected_path == "":
                    text(expected)
                else:
                    with tag("a", href="./log/"+expected_path):
                        doc.stag("img", src="./log/"+expected_path)

        with tag("td"):
            screenshot_path = _copy_testfile(screenshot)
            with tag("a", href="./log/"+screenshot_path):
                doc.stag("img", src="./log/"+screenshot_path)

    # Write the row to the partial html file
    with open(partial_html, "a") as f:
        f.write(doc.getvalue())

def display_log():
    #
    # Display a log that has been generated by running tests and logging with TestHelper.
    #

    # Default log folder: /vagrant/log on VM, ./log on HM
    # Make sure the folder exists
    if not os.path.exists(artifact_folder):
        print("Folder not found: " + artifact_folder + "\n")
        exit(1)

    # Make sure there is one and only one .log file in the folder
    glob_result_log = glob.glob(artifact_folder + "/*.log")
    if len(glob_result_log) < 1:
        print("No .log file found in folder: " + artifact_folder + "\n")
        exit(1)
    elif len(glob_result_log) > 1:
        print("Multiple .log files found in folder: " + artifact_folder + "\n")
        exit(1)
    else:
        log_file = glob_result_log[0]

    # Make sure there is one and only one .css file in the folder
    glob_result_css = glob.glob(artifact_folder + "/*.css")
    if len(glob_result_css) < 1:
        print("No css file found in folder: " + artifact_folder + "\n")
        exit(1)
    elif len(glob_result_css) > 1:
        print("Multiple css files found in folder: " + artifact_folder + "\n")
        exit(1)
    else:
        css_file = os.path.basename(glob_result_css[0])

    # Build the html log
    with open(os.path.dirname(log_folder) + "/log.html", "w") as html_file:
        doc, tag, text = Doc().tagtext()
        doc.asis('<!DOCTYPE html>')

        with tag("html", lang="en_us"):
            with tag("head"):
                with tag("title"):
                    text("Test Results")
                doc.stag("link", href="./log/"+css_file, rel="stylesheet", type="text/css")
            with tag("body"):
                with tag("table"):
                    with tag("thead"):
                        with tag("tr"):
                            with tag("th"):
                                text("Status")
                            with tag("th"):
                                text("Time and Date")
                            with tag("th"):
                                text("Test name")
                            with tag("th"):
                                text("Action")
                            with tag("th"):
                                text("Expected")
                            with tag("th"):
                                text("Screenshot")
                    with tag("tbody"):
                        # Add in the .log file, which should contain table rows
                        with open(log_file, "r") as f:
                            doc.asis(f.read())

        # Write the html document to the file
        html_file.write(doc.getvalue())

    # Open a browser tab with the file displayed in it
    new = 2  # open in a new tab if possible
    url = "file://" + os.path.dirname(log_folder) + "/log.html"
    #import webbrowser
    #webbrowser.open(url, new=new)

####DEBUG METHODS WORKAROUND####

class Debug(SikuliDebug):
    printoutuser = None

    @staticmethod
    def getUserLogFile():
        return Debug.printoutuser

    @staticmethod
    def setUserLogFile(fileName):
        if fileName == None:
            fileName = ""
        if fileName != None:
            if "" == fileName:
                if Settings.isMacApp:
                    Debug.printoutuser = "UserLog.txt"
                else:
                    Debug.printoutuser = getBundleFolder()+ "UserLog.txt"
            try:
                Debug.printoutuser = fileName
                with open(Debug.printoutuser, "a") as f:
                    f.write("")
                return True
            except:
                print "[Error] User logfile %s not accessible - check given path"% fileName
                return False
        return False

    @staticmethod
    def user(message):
        if SikuliSettings.UserLogs:
            with open(Debug.printoutuser, "a") as f:
                if SikuliSettings.UserLogTime:
                    text = '[{} ({})] {}'.format(SikuliSettings.UserLogPrefix,'{:%m/%d/%y %I:%M:%S %p}'.format(datetime.datetime.now()).lstrip("0").replace(" 0", " "), message)
                else:
                    text = '[{}] {}'.format(SikuliSettings.UserLogPrefix, message)
                f.write(text+"\n")